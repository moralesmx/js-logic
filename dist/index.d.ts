declare type Rule$ = ['$', ...RuleOrValue[]];
declare type Rule$$ = ['$$', ...RuleOrValue[]];
declare type Rule$And = ['$&&', ...RuleOrValue[]];
declare type Rule$Or = ['$||', ...RuleOrValue[]];
declare type Rule$Equal = ['$==', RuleOrValue, RuleOrValue];
declare type Rule$StrictEqual = ['$===', RuleOrValue, RuleOrValue];
declare type Rule$NotEqual = ['$!=', RuleOrValue, RuleOrValue];
declare type Rule$StrictNotEqual = ['$!==', RuleOrValue, RuleOrValue];
declare type Rule$Not = ['$!', RuleOrValue];
declare type Rule$DoubleNot = ['$!!', RuleOrValue];
declare type Rule$GraterThan = ['$>', RuleOrValue, RuleOrValue];
declare type Rule$GraterThanOrEqual = ['$>=', RuleOrValue, RuleOrValue];
declare type Rule$LessThan = ['$<', RuleOrValue, RuleOrValue];
declare type Rule$LessThanOrEqual = ['$<=', RuleOrValue, RuleOrValue];
declare type Rule$Addition = ['$+', ...RuleOrValue[]];
declare type Rule$Multiplication = ['$*', ...RuleOrValue[]];
declare type Rule$Subtraction = ['$-', RuleOrValue, RuleOrValue];
declare type Rule$Division = ['$/', RuleOrValue, RuleOrValue];
declare type Rule$Modulo = ['$%', RuleOrValue, RuleOrValue];
declare type Rule$Map = ['$map', RuleOrValue, RuleOrValue];
declare type Rule$Filter = ['$filter', RuleOrValue, RuleOrValue];
declare type Rule$Reduce = ['$reduce', RuleOrValue, RuleOrValue, RuleOrValue];
declare type Rule$Call = ['$call', RuleOrValue, ...RuleOrValue[]];
declare type Rule = Rule$ | Rule$$ | Rule$And | Rule$Or | Rule$Equal | Rule$StrictEqual | Rule$NotEqual | Rule$StrictNotEqual | Rule$Not | Rule$DoubleNot | Rule$GraterThan | Rule$GraterThanOrEqual | Rule$LessThan | Rule$LessThanOrEqual | Rule$Addition | Rule$Multiplication | Rule$Subtraction | Rule$Division | Rule$Modulo | Rule$Map | Rule$Filter | Rule$Reduce | Rule$Call;
declare type RuleOrValue = string | number | Rule;
export declare function apply(rule: RuleOrValue, data: any, local: any): any;
export {};
